// Generated by Apple Swift version 3.0.2 (swiftlang-800.0.63 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

SWIFT_CLASS("_TtC5AceTM9AceOption")
@interface AceOption : NSObject
- (nonnull instancetype)initWithCode:(NSString * _Nonnull)code name:(NSString * _Nonnull)name quantity:(NSInteger)quantity OBJC_DESIGNATED_INITIALIZER;
- (void)setCodeWithCode:(NSString * _Nonnull)code;
- (NSString * _Nonnull)getCode;
- (void)setNameWithName:(NSString * _Nonnull)name;
- (NSString * _Nonnull)getName;
- (void)setQuantityWithQuantity:(NSInteger)quantity;
- (NSInteger)getQuantity;
- (NSString * _Nonnull)toQueryString;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class UIResponder;

SWIFT_CLASS("_TtC5AceTM12AceParameter")
@interface AceParameter : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable tk;)
+ (NSString * _Nullable)tk;
+ (void)setTk:(NSString * _Nullable)value;
+ (void)viewDidLoadWithResponder:(UIResponder * _Nonnull)responder;
+ (void)appDidFinishLaunchingWithResponder:(UIResponder * _Nonnull)responder;
- (NSString * _Nonnull)toQueryString;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC5AceTM10AceProduct")
@interface AceProduct : NSObject
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name code:(NSString * _Nonnull)code price:(double)price quantity:(NSInteger)quantity OBJC_DESIGNATED_INITIALIZER;
- (void)setCodeWithCode:(NSString * _Nonnull)code;
- (NSString * _Nonnull)getCode;
- (void)setNameWithName:(NSString * _Nonnull)name;
- (NSString * _Nonnull)getName;
- (void)setPriceWithPrice:(double)price;
- (double)getPrice;
- (void)setQuantityWithQuantity:(NSInteger)quantity;
- (NSInteger)getQuantity;
- (void)addOptionWithOption:(AceOption * _Nonnull)option;
- (NSArray<NSString *> * _Nonnull)toQueryString;
+ (NSArray<NSString *> * _Nonnull)toProductListQueryStringWithProducts:(NSArray<AceProduct *> * _Nonnull)products;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class UIWebView;

SWIFT_CLASS("_TtC5AceTM5AceTM")
@interface AceTM : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull GD_MAN;)
+ (NSString * _Nonnull)GD_MAN;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull GD_WOMAN;)
+ (NSString * _Nonnull)GD_WOMAN;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull GD_UNKNOWN;)
+ (NSString * _Nonnull)GD_UNKNOWN;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (void)appDidFinishLaunchingWithResponder:(UIResponder * _Nonnull)responder;
+ (void)appOpenUrlWithResponder:(UIResponder * _Nonnull)responder url:(NSURL * _Nonnull)url;
+ (void)viewDidLoadWithResponder:(UIResponder * _Nonnull)responder autoPv:(BOOL)autoPv;
- (void)addSendQueueWithQueryString:(NSString * _Nonnull)queryString;
+ (void)pvWithResponder:(UIResponder * _Nonnull)responder;
+ (void)pvWithPage:(NSString * _Nonnull)page;
+ (void)pageErrWithResponder:(UIResponder * _Nonnull)responder;
+ (void)pageErrWithPage:(NSString * _Nonnull)page;
+ (void)hrefWithHref:(NSString * _Nonnull)href;
+ (void)telWithPhoneNumber:(NSString * _Nonnull)phoneNumber;
+ (void)customerClickWithClickName:(NSString * _Nonnull)clickName;
+ (void)snsWithProductNumber:(NSString * _Nullable)productNumber sns:(NSString * _Nonnull)sns;
+ (void)bannerClickWithPromotionCode:(NSInteger)promotionCode bannerCode:(NSInteger)bannerCode;
+ (void)bannerViewWithPromotionCode:(NSInteger)promotionCode bannerCode:(NSInteger)bannerCode;
+ (void)codeErrWithErrCode:(NSInteger)errCode reason:(NSString * _Nullable)reason;
+ (void)buyNowWithProduct:(AceProduct * _Nonnull)product;
+ (void)wishListWithProduct:(AceProduct * _Nonnull)product;
+ (void)addCartWithProduct:(AceProduct * _Nonnull)product;
+ (void)buyListWithPaymentMethod:(NSString * _Nonnull)paymentMethod orderNumber:(NSString * _Nonnull)orderNumber totalPrice:(double)totalPrice product:(AceProduct * _Nonnull)product;
+ (void)buyListWithPaymentMethod:(NSString * _Nonnull)paymentMethod orderNumber:(NSString * _Nonnull)orderNumber totalPrice:(double)totalPrice products:(NSArray<AceProduct *> * _Nonnull)products;
+ (void)reviewWithProductNumber:(NSString * _Nonnull)productNumber reviewContents:(NSString * _Nullable)reviewContents score:(NSInteger)score;
+ (void)payWithPayName:(NSString * _Nonnull)payName product:(AceProduct * _Nonnull)product;
+ (void)payWithPayName:(NSString * _Nonnull)payName products:(NSArray<AceProduct *> * _Nonnull)products;
+ (void)loginWithResponder:(UIResponder * _Nonnull)responder userId:(NSString * _Nonnull)userId userAge:(NSInteger)userAge userGender:(NSString * _Nonnull)userGender;
+ (void)loginWithPage:(NSString * _Nonnull)page userId:(NSString * _Nonnull)userId userAge:(NSInteger)userAge userGender:(NSString * _Nonnull)userGender;
+ (void)joinWithResponder:(UIResponder * _Nonnull)responder userId:(NSString * _Nonnull)userId userValue:(NSInteger)userValue;
+ (void)deactivateWithResponder:(UIResponder * _Nonnull)responder userId:(NSString * _Nonnull)userId;
+ (void)detailViewWithResponder:(UIResponder * _Nonnull)responder productNumber:(NSString * _Nonnull)productNumber productName:(NSString * _Nonnull)productName productPrice:(double)productPrice productCategory:(NSString * _Nonnull)productCategory productImageUrl:(NSString * _Nonnull)productImageUrl;
+ (void)detailViewWithPage:(NSString * _Nonnull)page productNumber:(NSString * _Nonnull)productNumber productName:(NSString * _Nonnull)productName productPrice:(double)productPrice productCategory:(NSString * _Nonnull)productCategory productImageUrl:(NSString * _Nonnull)productImageUrl;
+ (void)innerSearchWithResponder:(UIResponder * _Nonnull)responder keyword:(NSString * _Nonnull)keyword;
+ (void)innerSearchWithPage:(NSString * _Nonnull)page keyword:(NSString * _Nonnull)keyword;
+ (void)sdkErrWithFunctionName:(NSString * _Nonnull)functionName reason:(NSString * _Nonnull)reason;
+ (void)sdkErrWithMsg:(NSString * _Nonnull)msg;
+ (void)webViewDidFinishLoadWithWebView:(UIWebView * _Nonnull)webView;
+ (void)webViewDidStartLoadWithWebView:(UIWebView * _Nonnull)webView;
@end


@interface NSUserDefaults (SWIFT_EXTENSION(AceTM))
@end

#pragma clang diagnostic pop
